#!/usr/bin/env python
# copy module
# Copies a file over to the node over a given transport
# This module is a special case and the bulk of the work is done
# in the henchman engine. This module however ensures that the permissions
# are satisfied
# Params for this module
# owner: The owner of the file (optional)
# group: The group of the file (optional)
# mode:  The file mode (default: 644).  Directories should be 755
# dest:  The destination. Should be a file (required)

# Flow:
# Read the files/Dirs using sftp on remote_host
# recreate that on a separate folder here or put in henchman folder.  Run the module using localhost and transfer it 
# locally 
# May we can just use the copy module and specify localhost when it wants something transferred.
# 
import sys
import json
import os
import os.path
import subprocess
import pwd
import grp
import shutil

params = json.loads(sys.stdin.read())

result = {}
try:
    owner = params.get("owner",pwd.getpwuid( os.getuid() ).pw_name)
    group = params.get("group",grp.getgrgid( os.getgid() ).gr_name)
    mode = params.get("mode")
    dest = params.get("dest")
    override = params.get("override", "true")

    if override.lower() == "false":
      override = False
    elif override.lower() == "true":
      override = True
    else:
      raise Exception("override param must be true or false")

    if not dest:
        raise Exception("dest cannot be empty. Has to be a file")

    # if the dest has multiple parts make the folders
    dirs = params.get("dest").split('/') 
    dirs = [x for x in dirs if x != ""]
    if len(dirs) > 1:
      dirs = '/'.join(dirs)
      if not os.path.exists(dirs):
        os.makedirs(dirs)

    if os.path.isdir(dest):
      fType = "directory"
    else:
      fType = "file"

    rmtSrc = os.path.relpath(params.get("rmtSrc"))
    if override:
      # remove the existing dest
      if os.path.exists(dest):
        if os.path.isdir(dest):
          shutil.rmtree(dest)
        else:
          os.remove(dest)
    else:
      # extend dest so the folder/file will be nested
      dest = os.path.join(dest, os.path.basename(rmtSrc))

    shutil.move(rmtSrc, dest)

    result["owner"] = owner
    result["group"] = group

    command = ["/bin/chown","-R","%s:%s" % (owner,group), "%s" % dest]
    p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, err = p.communicate()
    if err != "":
        raise Exception(err)
    
    if mode:
      command = ["/bin/chmod","-R","%s" % mode, "%s" % dest]
      p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
      output, err = p.communicate()
      if err != "":
          raise Exception(err)

    result['status'] = "changed"
    result['msg'] = "State of %s %s changed" % (fType, dest)

except Exception as e:
    result["status"] = "error"
    result["msg"] = "Error occurred while changing state of %s %s" % (fType, dest)
    result["output"] = {"stderr": str(e)}
print json.dumps(result)
